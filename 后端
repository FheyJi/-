一、C#基础
1、什么是面向对象描述，
2、面向对象三大特征：继承、封装、多态
3、面向对象的五大原则：
a、单一功能原则 ： 每个类型（包括接口和抽象）功能要求单一，只负责一件事情。
b、开放封闭原则：一个软件实体应该对扩展开发，对修改关闭。可扩展但是不可更改。核心：用抽象构建框架，用实现类实现扩展。
c、替换原则（里氏代换原则）：子类能够替换父类，出现在父类能够出现的任何地方。当使用继承时，尽量遵循历史替换原则，尽量不
要去重写或者重载父类的方法，以免破坏整个继承体系的 。因为父类在定义或者实现某些方法时，规定了必须遵守的规则和契约。
d、依赖原则：具体依赖抽象，上层依赖下层。核心思想是面向接口编程。两个模块之间依赖的应该是抽象（接口或抽象类）而不是细节。细节（实现类）依赖于抽象。
依赖原则基于的事实：相对于实现类的多变性，抽象的东西要稳定得多，基于抽象的构架也比基于实现的架构更加稳定，且扩展性更高
e、接口分离原则：模块间要通过具体接口分离开，而不是通过类强耦合。例如A类对B类的依赖，可以抽象接口I，B实现I，A类依赖I来实现。但是抽象接口必须功能最小化（与单一功能原则有点不谋而合）。
4、接口和抽象类的区别
*5、事件和委托的区别
6、什么是attribute？
7、锁有哪几种？ lock 、Monitor
8、string和StringBuilder的区别？
9、out ref的区别
①：ref指定的参数在函数调用时候必须初始化，不能为空的引用。而out指定的参数在函数调用时候可以不初始化；
②：out指定的参数在进入函数时会清空自己，必须在函数内部赋初值。而ref指定的参数不需要。
10、ADO.NET中的五个主要对象
a、Connection：主要用来开启程序和数据库之间的连接，没有利用Connection对象连接数据库，是无法从数据库中取得数据的。Close()和Dispose()的区别就是Close
以后还可以Open，但是Dispose是释放了连接，要操作数据库就要重新连接数据库。
b、Command：主要用来对数据库发出一些指令，例如可以对数据库发出增删改查的指令，或者调用存在数据库中的存储过程等。这个对象是建立在Connection对象之上的，
也就是Command对象需要连接到数据库之后才可以操作数据库中的数据。
c、DataAdapter：主要是在数据源以及DataSet之间执行数据库传输工作，它可以透过Command对象下达命令后，然后将取得的数据通过DataAdapter对象调用Fill()方法
填充到DataSet对象中。
d、DataSet：这个对象可以视为一个暂存区(Cache)，可以把从数据库中所查询到的数据保留起来，甚至可以将整个数据库显示出来，DataSet是放在内存中的，DataSet
的能力不只是可以存储多个Table而已，还可以透过DataAdapter对象取得一些例如主键等的数据表结构，并可以记录数据表间的关联。DataSet对象可以说是ADO.Net中重
量级的对象，这个对象架构在DataAdapter对象上，本身不具备和数据源沟通的能力；也就是说我们是将DataAdapter对象当作DataSet对象以及数据源间传输数据的桥梁。
DataSet包含若干DataTable、DataTable包含若干DataRow。
e、DataReader：当我们只需要循序的读取数据而不需要其他操作时，可以使用DataReader对象。DataReader对象只是一次一次向下循序读取数据源中的数据，这些数据
是存在数据库服务器中的，而不是一次性加载到程序的内存中的，只能(通过游标)读取当前行的数据，而且这些数据是只读的，并不允许其他的操作。因为DataReader在读取数据的时候限制了每次只读取一行，而且只能只读，所以使用起来不但节省资源而且效率很高。使用DataReader对象除了效率较好之外，因为不用把数据全部传回，故可以降低网路的负载。
11、C#中的非托管代码是什么
答：在公共语言运行库环境的外部，由操作系统直接执行的代码。非托管代码必须提供自己的垃圾回收、类型检查、安全支持等服务；它与托管代码不同，后者从公共语言运行库中获得这些服务。
*12、解释下GC的原理
13、什么是反射、反射的优缺点、反射怎么创建
14、EF跨库查询
14、EF与内存对象可以联合查询吗？可以的话查询有什么坏处？
*15、值类型和引用类型的区别？
引用类型在栈中存储一个引用，其实际的存储位置位于托管堆。简称引用类型部署在托管推上。
而值类型总是分配在它声明的地方：作为字段时，跟随其所属的变量（实 例）存储；作为局部变量时，存储在栈上。（栈的内存是自动释放的，堆内存是.NET中会由GC来自动释放）
16、CTS是通用类型系统(Common Type System)
     CLR是公共语言运行时(Common language runtime)
     CLS是公共语言定义(Common Language）
     
二、框架
1、什么是三层架构
2、什么是mvc，mvc的意义
3、MVC同三层比较
4、MVC生命周期
*5、MVC路由机制
*6、MVC过滤器
7、简述viewdata，viewbag和tempdata的区别
ViewData：ViewData是一个字典集合，通过key值读取对应的value使用方法：ViewData["myname"]="张三"
ViewBag：ViewBag
是动态类型，作用和ViewData一样，都是用来存储信息，有一些不同的是ViewData是object类型，ViewBag是动态类型，从运行效率
上来讲，ViewBag高于ViewData。在实际开发中，通不只用其中一种。使用方法：ViewBag.data="张三"
TempData：跨请求数据传递，它的机制类似于Session对象，不同的页面之间可以传递参数，但TempData只保存上一次的数据，当页面再次刷新，数据消失。
使用方法：TempData["myname"]="张三"
8、SOA面向服务架构
9、领域驱动设计（DDD）
10、搞过分布式系统吗？什么是分布式系统

三、接口
*1、用过哪些接口？webservice、wcf、webapi
2、比较这些接口？
3、webapi跨域问题
4、webapi安全性问题
5、你用这些接口做过什么？

四、服务器缓存
1、用过什么服务器缓存？Redis、MongoDB、Memcached
2、Redis、MongoDB及Memcached的区别？
3、Redis查询变化怎么同步
4、分布式缓存
5、Redis存储类型:键值对，list，set，hash
6、Redis存储长度限制

五、异步编程
1、用过多线程吗？实际项目中用多线程做过什么？
2、解释下线程池
3、异步编程除了多线程还有什么？Async
4、同步异步的区别
5、多线程sleep与wait的区别
sleep方法调用之后，并没有释放锁。使得线程仍然可以同步控制。sleep不会让出系统资源；
而wait是进入线程等待池中等待，让出系统资源。
sleep可以在任何地方使用。而wait，notify，notifyAll只能在同步控制方法或者同步控制块中使用。

六、开源框架
1、用过哪些开源框架
2、Spring：
  1、解释下控制反转（IOC）和依赖注入（DI）？
  2、在实际项目中体验过控制反转（IOC）和依赖注入（DI）的好处吗？
  3、Spring Aop是什么？你在项目中怎么使用AOP？
    前置通知类，后置通知类，环绕通知类，异常通知类
  4、Spring Aop同过滤器的区别？
  5、NPOI导出类型
  
七、其它
1、在实际项目中用过什么设计模式，怎么做的？
2、做过搜索吗？怎么做的？
3、性能优化


